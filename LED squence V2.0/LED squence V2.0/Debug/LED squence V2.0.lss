
LED squence V2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000004ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b38  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000703  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075c  00000000  00000000  00001847  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d9  00000000  00000000  000024a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_1>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	76 00       	.word	0x0076	; ????
  56:	87 00       	.word	0x0087	; ????
  58:	8c 00       	.word	0x008c	; ????
  5a:	91 00       	.word	0x0091	; ????
  5c:	96 00       	.word	0x0096	; ????
  5e:	9b 00       	.word	0x009b	; ????
  60:	a0 00       	.word	0x00a0	; ????
  62:	a5 00       	.word	0x00a5	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a1 36       	cpi	r26, 0x61	; 97
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  84:	0c 94 3b 02 	jmp	0x476	; 0x476 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <LED_init>:


uint8_t LED_init(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_init(Port_number, Pin_number, out) == 0 )
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_init>
  92:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
  94:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
  96:	08 95       	ret

00000098 <LED_ON>:


uint8_t LED_ON(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_write(Port_number, Pin_number, high) == 0)
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
  9e:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
  a2:	08 95       	ret

000000a4 <LED_OFF>:

uint8_t LED_OFF(uint8_t Port_number, uint8_t Pin_number)
{
	uint8_t error=0;
	if(DIO_write(Port_number, Pin_number, low) == 0)
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	0e 94 3b 01 	call	0x276	; 0x276 <DIO_write>
  aa:	81 11       	cpse	r24, r1
	{
		error=0;
	}
	else
	{
		error=1;
  ac:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
  ae:	08 95       	ret

000000b0 <main>:
static uint8_t case_no=0;

int main(void)
{
	/* Replace with your application code */
	LED_init(Port_A,PIN_0);
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	81 e4       	ldi	r24, 0x41	; 65
  b4:	0e 94 46 00 	call	0x8c	; 0x8c <LED_init>
	LED_init(Port_A,PIN_1);
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	81 e4       	ldi	r24, 0x41	; 65
  bc:	0e 94 46 00 	call	0x8c	; 0x8c <LED_init>
	LED_init(Port_A,PIN_2);
  c0:	62 e0       	ldi	r22, 0x02	; 2
  c2:	81 e4       	ldi	r24, 0x41	; 65
  c4:	0e 94 46 00 	call	0x8c	; 0x8c <LED_init>
	LED_init(Port_A,PIN_3);
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	81 e4       	ldi	r24, 0x41	; 65
  cc:	0e 94 46 00 	call	0x8c	; 0x8c <LED_init>
	ex_int_init(Interrupt_0,rising_edge);
  d0:	66 e0       	ldi	r22, 0x06	; 6
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 b6 01 	call	0x36c	; 0x36c <ex_int_init>
	
	while (1)
	{
		switch(case_no)
  d8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	e8 30       	cpi	r30, 0x08	; 8
  e0:	f1 05       	cpc	r31, r1
  e2:	d0 f7       	brcc	.-12     	; 0xd8 <main+0x28>
  e4:	e6 5d       	subi	r30, 0xD6	; 214
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	0c 94 35 02 	jmp	0x46a	; 0x46a <__tablejump2__>
		{
			case 0:
			LED_OFF(Port_A,PIN_0);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	81 e4       	ldi	r24, 0x41	; 65
  f0:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_OFF>
			LED_OFF(Port_A,PIN_1);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	81 e4       	ldi	r24, 0x41	; 65
  f8:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_OFF>
			LED_OFF(Port_A,PIN_2);
  fc:	62 e0       	ldi	r22, 0x02	; 2
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_OFF>
			LED_OFF(Port_A,PIN_3);
 104:	63 e0       	ldi	r22, 0x03	; 3
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_OFF>
			break;
 10c:	e5 cf       	rjmp	.-54     	; 0xd8 <main+0x28>
			case 1:
			LED_ON(Port_A,PIN_0);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	81 e4       	ldi	r24, 0x41	; 65
 112:	0e 94 4c 00 	call	0x98	; 0x98 <LED_ON>
			break;
 116:	e0 cf       	rjmp	.-64     	; 0xd8 <main+0x28>
			case 2:
			LED_ON(Port_A,PIN_1);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 4c 00 	call	0x98	; 0x98 <LED_ON>
			break;
 120:	db cf       	rjmp	.-74     	; 0xd8 <main+0x28>
			case 3:
			LED_ON(Port_A,PIN_2);
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 4c 00 	call	0x98	; 0x98 <LED_ON>
			break;
 12a:	d6 cf       	rjmp	.-84     	; 0xd8 <main+0x28>
			case 4:
			LED_ON(Port_A,PIN_3);
 12c:	63 e0       	ldi	r22, 0x03	; 3
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 4c 00 	call	0x98	; 0x98 <LED_ON>
			break;
 134:	d1 cf       	rjmp	.-94     	; 0xd8 <main+0x28>
			case 5:
			LED_OFF(Port_A,PIN_0);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_OFF>
			break;
 13e:	cc cf       	rjmp	.-104    	; 0xd8 <main+0x28>
			case 6:
			LED_OFF(Port_A,PIN_1);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_OFF>
			break;
 148:	c7 cf       	rjmp	.-114    	; 0xd8 <main+0x28>
			case 7:
			LED_OFF(Port_A,PIN_2);
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	81 e4       	ldi	r24, 0x41	; 65
 14e:	0e 94 52 00 	call	0xa4	; 0xa4 <LED_OFF>
			break;
 152:	c2 cf       	rjmp	.-124    	; 0xd8 <main+0x28>

00000154 <__vector_1>:
		}
	}
}

ISR(INT0_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
	if(case_no<=6)
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 164:	87 30       	cpi	r24, 0x07	; 7
 166:	20 f4       	brcc	.+8      	; 0x170 <__vector_1+0x1c>
	{
		case_no++;
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 16e:	02 c0       	rjmp	.+4      	; 0x174 <__vector_1+0x20>
	}
	else
	{
		case_no=0;
 170:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
 174:	8f 91       	pop	r24
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <DIO_init>:
#include "DIO.h"

uint8_t DIO_init(uint8_t PORTNumber, uint8_t PinNumber, uint8_t direction)
{
	uint8_t error=0;
	switch(PORTNumber)
 180:	82 34       	cpi	r24, 0x42	; 66
 182:	31 f1       	breq	.+76     	; 0x1d0 <DIO_init+0x50>
 184:	18 f4       	brcc	.+6      	; 0x18c <DIO_init+0xc>
 186:	81 34       	cpi	r24, 0x41	; 65
 188:	39 f0       	breq	.+14     	; 0x198 <DIO_init+0x18>
 18a:	73 c0       	rjmp	.+230    	; 0x272 <DIO_init+0xf2>
 18c:	83 34       	cpi	r24, 0x43	; 67
 18e:	e1 f1       	breq	.+120    	; 0x208 <DIO_init+0x88>
 190:	84 34       	cpi	r24, 0x44	; 68
 192:	09 f4       	brne	.+2      	; 0x196 <DIO_init+0x16>
 194:	54 c0       	rjmp	.+168    	; 0x23e <DIO_init+0xbe>
 196:	6d c0       	rjmp	.+218    	; 0x272 <DIO_init+0xf2>
	{
		uint8_t error=0;
		case Port_A:
			if(direction == in)
 198:	41 11       	cpse	r20, r1
 19a:	0c c0       	rjmp	.+24     	; 0x1b4 <DIO_init+0x34>
			Clear_Bit(DDRA,PinNumber);
 19c:	2a b3       	in	r18, 0x1a	; 26
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_init+0x28>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_init+0x24>
 1ac:	80 95       	com	r24
 1ae:	82 23       	and	r24, r18
 1b0:	8a bb       	out	0x1a, r24	; 26
 1b2:	5f c0       	rjmp	.+190    	; 0x272 <DIO_init+0xf2>
			else if(direction == out)
 1b4:	41 30       	cpi	r20, 0x01	; 1
 1b6:	09 f0       	breq	.+2      	; 0x1ba <DIO_init+0x3a>
 1b8:	5c c0       	rjmp	.+184    	; 0x272 <DIO_init+0xf2>
			Set_Bit(DDRA,PinNumber);
 1ba:	2a b3       	in	r18, 0x1a	; 26
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_init+0x46>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_init+0x42>
 1ca:	82 2b       	or	r24, r18
 1cc:	8a bb       	out	0x1a, r24	; 26
 1ce:	51 c0       	rjmp	.+162    	; 0x272 <DIO_init+0xf2>
			else
			error=1;
			break;
		case Port_B:
			if(direction == in)
 1d0:	41 11       	cpse	r20, r1
 1d2:	0c c0       	rjmp	.+24     	; 0x1ec <DIO_init+0x6c>
			Clear_Bit(DDRB,PinNumber);
 1d4:	27 b3       	in	r18, 0x17	; 23
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_init+0x60>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_init+0x5c>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	87 bb       	out	0x17, r24	; 23
 1ea:	43 c0       	rjmp	.+134    	; 0x272 <DIO_init+0xf2>
			else if(direction == out)
 1ec:	41 30       	cpi	r20, 0x01	; 1
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <DIO_init+0x72>
 1f0:	40 c0       	rjmp	.+128    	; 0x272 <DIO_init+0xf2>
			Set_Bit(DDRB,PinNumber);
 1f2:	27 b3       	in	r18, 0x17	; 23
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_init+0x7e>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_init+0x7a>
 202:	82 2b       	or	r24, r18
 204:	87 bb       	out	0x17, r24	; 23
 206:	35 c0       	rjmp	.+106    	; 0x272 <DIO_init+0xf2>
			else
			error=1;
			break;
		case Port_C:
			if(direction == in)
 208:	41 11       	cpse	r20, r1
 20a:	0c c0       	rjmp	.+24     	; 0x224 <DIO_init+0xa4>
			Clear_Bit(DDRC,PinNumber);
 20c:	24 b3       	in	r18, 0x14	; 20
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_init+0x98>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_init+0x94>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	84 bb       	out	0x14, r24	; 20
 222:	27 c0       	rjmp	.+78     	; 0x272 <DIO_init+0xf2>
			else if(direction == out)
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	29 f5       	brne	.+74     	; 0x272 <DIO_init+0xf2>
			Set_Bit(DDRC,PinNumber);
 228:	24 b3       	in	r18, 0x14	; 20
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_init+0xb4>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_init+0xb0>
 238:	82 2b       	or	r24, r18
 23a:	84 bb       	out	0x14, r24	; 20
 23c:	1a c0       	rjmp	.+52     	; 0x272 <DIO_init+0xf2>
			else
			error=1;
			break;
		case Port_D:
			if(direction == in)
 23e:	41 11       	cpse	r20, r1
 240:	0c c0       	rjmp	.+24     	; 0x25a <DIO_init+0xda>
			Clear_Bit(DDRD,PinNumber);
 242:	21 b3       	in	r18, 0x11	; 17
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_init+0xce>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_init+0xca>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	81 bb       	out	0x11, r24	; 17
 258:	0c c0       	rjmp	.+24     	; 0x272 <DIO_init+0xf2>
			else if(direction == out)
 25a:	41 30       	cpi	r20, 0x01	; 1
 25c:	51 f4       	brne	.+20     	; 0x272 <DIO_init+0xf2>
			Set_Bit(DDRD,PinNumber);
 25e:	21 b3       	in	r18, 0x11	; 17
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_init+0xea>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_init+0xe6>
 26e:	82 2b       	or	r24, r18
 270:	81 bb       	out	0x11, r24	; 17
			break;
			default:
			error=1;
	}
	return error;
}
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret

00000276 <DIO_write>:
	
	uint8_t DIO_write(uint8_t PORTNumber, uint8_t PinNumber, uint8_t value)
	{
		uint8_t error=0;
		switch(PORTNumber)
 276:	82 34       	cpi	r24, 0x42	; 66
 278:	31 f1       	breq	.+76     	; 0x2c6 <DIO_write+0x50>
 27a:	18 f4       	brcc	.+6      	; 0x282 <DIO_write+0xc>
 27c:	81 34       	cpi	r24, 0x41	; 65
 27e:	39 f0       	breq	.+14     	; 0x28e <DIO_write+0x18>
 280:	73 c0       	rjmp	.+230    	; 0x368 <DIO_write+0xf2>
 282:	83 34       	cpi	r24, 0x43	; 67
 284:	e1 f1       	breq	.+120    	; 0x2fe <DIO_write+0x88>
 286:	84 34       	cpi	r24, 0x44	; 68
 288:	09 f4       	brne	.+2      	; 0x28c <DIO_write+0x16>
 28a:	54 c0       	rjmp	.+168    	; 0x334 <DIO_write+0xbe>
 28c:	6d c0       	rjmp	.+218    	; 0x368 <DIO_write+0xf2>
		{
			uint8_t error=0;
			case Port_A:
				if(value == low)
 28e:	41 11       	cpse	r20, r1
 290:	0c c0       	rjmp	.+24     	; 0x2aa <DIO_write+0x34>
				Clear_Bit(PORTA,PinNumber);
 292:	2b b3       	in	r18, 0x1b	; 27
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_write+0x28>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_write+0x24>
 2a2:	80 95       	com	r24
 2a4:	82 23       	and	r24, r18
 2a6:	8b bb       	out	0x1b, r24	; 27
 2a8:	5f c0       	rjmp	.+190    	; 0x368 <DIO_write+0xf2>
				else if(value == high)
 2aa:	41 30       	cpi	r20, 0x01	; 1
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <DIO_write+0x3a>
 2ae:	5c c0       	rjmp	.+184    	; 0x368 <DIO_write+0xf2>
				Set_Bit(PORTA,PinNumber);
 2b0:	2b b3       	in	r18, 0x1b	; 27
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_write+0x46>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_write+0x42>
 2c0:	82 2b       	or	r24, r18
 2c2:	8b bb       	out	0x1b, r24	; 27
 2c4:	51 c0       	rjmp	.+162    	; 0x368 <DIO_write+0xf2>
				else
				error=1;
				break;
			case Port_B:
				if(value == low)
 2c6:	41 11       	cpse	r20, r1
 2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <DIO_write+0x6c>
				Clear_Bit(PORTB,PinNumber);
 2ca:	28 b3       	in	r18, 0x18	; 24
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_write+0x60>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_write+0x5c>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	88 bb       	out	0x18, r24	; 24
 2e0:	43 c0       	rjmp	.+134    	; 0x368 <DIO_write+0xf2>
				else if(value == high)
 2e2:	41 30       	cpi	r20, 0x01	; 1
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <DIO_write+0x72>
 2e6:	40 c0       	rjmp	.+128    	; 0x368 <DIO_write+0xf2>
				Set_Bit(PORTB,PinNumber);
 2e8:	28 b3       	in	r18, 0x18	; 24
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_write+0x7e>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_write+0x7a>
 2f8:	82 2b       	or	r24, r18
 2fa:	88 bb       	out	0x18, r24	; 24
 2fc:	35 c0       	rjmp	.+106    	; 0x368 <DIO_write+0xf2>
				else
				error=1;
				break;
			case Port_C:
				if(value == low)
 2fe:	41 11       	cpse	r20, r1
 300:	0c c0       	rjmp	.+24     	; 0x31a <DIO_write+0xa4>
				Clear_Bit(PORTC,PinNumber);
 302:	25 b3       	in	r18, 0x15	; 21
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_write+0x98>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_write+0x94>
 312:	80 95       	com	r24
 314:	82 23       	and	r24, r18
 316:	85 bb       	out	0x15, r24	; 21
 318:	27 c0       	rjmp	.+78     	; 0x368 <DIO_write+0xf2>
				else if(value == high)
 31a:	41 30       	cpi	r20, 0x01	; 1
 31c:	29 f5       	brne	.+74     	; 0x368 <DIO_write+0xf2>
				Set_Bit(PORTC,PinNumber);
 31e:	25 b3       	in	r18, 0x15	; 21
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_write+0xb4>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_write+0xb0>
 32e:	82 2b       	or	r24, r18
 330:	85 bb       	out	0x15, r24	; 21
 332:	1a c0       	rjmp	.+52     	; 0x368 <DIO_write+0xf2>
				else
				error=1;
				break;
			case Port_D:
				if(value == low)
 334:	41 11       	cpse	r20, r1
 336:	0c c0       	rjmp	.+24     	; 0x350 <DIO_write+0xda>
				Clear_Bit(PORTD,PinNumber);
 338:	22 b3       	in	r18, 0x12	; 18
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_write+0xce>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_write+0xca>
 348:	80 95       	com	r24
 34a:	82 23       	and	r24, r18
 34c:	82 bb       	out	0x12, r24	; 18
 34e:	0c c0       	rjmp	.+24     	; 0x368 <DIO_write+0xf2>
				else if(value == high)
 350:	41 30       	cpi	r20, 0x01	; 1
 352:	51 f4       	brne	.+20     	; 0x368 <DIO_write+0xf2>
				Set_Bit(PORTD,PinNumber);
 354:	22 b3       	in	r18, 0x12	; 18
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_write+0xea>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_write+0xe6>
 364:	82 2b       	or	r24, r18
 366:	82 bb       	out	0x12, r24	; 18
				break;
				default:
				error=1;
		}
		return error;
	}
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	08 95       	ret

0000036c <ex_int_init>:
#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
	Set_Bit(SREG,7);
 36c:	9f b7       	in	r25, 0x3f	; 63
 36e:	90 68       	ori	r25, 0x80	; 128
 370:	9f bf       	out	0x3f, r25	; 63
	if(ex_int_number == Interrupt_0)
 372:	81 11       	cpse	r24, r1
 374:	30 c0       	rjmp	.+96     	; 0x3d6 <ex_int_init+0x6a>
	{
		switch(ex_int_mode)
 376:	64 30       	cpi	r22, 0x04	; 4
 378:	89 f0       	breq	.+34     	; 0x39c <ex_int_init+0x30>
 37a:	18 f4       	brcc	.+6      	; 0x382 <ex_int_init+0x16>
 37c:	63 30       	cpi	r22, 0x03	; 3
 37e:	31 f0       	breq	.+12     	; 0x38c <ex_int_init+0x20>
 380:	25 c0       	rjmp	.+74     	; 0x3cc <ex_int_init+0x60>
 382:	65 30       	cpi	r22, 0x05	; 5
 384:	99 f0       	breq	.+38     	; 0x3ac <ex_int_init+0x40>
 386:	66 30       	cpi	r22, 0x06	; 6
 388:	c9 f0       	breq	.+50     	; 0x3bc <ex_int_init+0x50>
 38a:	20 c0       	rjmp	.+64     	; 0x3cc <ex_int_init+0x60>
		{
			case low_level:
				Clear_Bit(MCUCR,0);
 38c:	85 b7       	in	r24, 0x35	; 53
 38e:	8e 7f       	andi	r24, 0xFE	; 254
 390:	85 bf       	out	0x35, r24	; 53
				Clear_Bit(MCUCR,1);
 392:	85 b7       	in	r24, 0x35	; 53
 394:	8d 7f       	andi	r24, 0xFD	; 253
 396:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
 398:	80 e0       	ldi	r24, 0x00	; 0
		switch(ex_int_mode)
		{
			case low_level:
				Clear_Bit(MCUCR,0);
				Clear_Bit(MCUCR,1);
				break;
 39a:	19 c0       	rjmp	.+50     	; 0x3ce <ex_int_init+0x62>
			case any_logical_change:
				Set_Bit(MCUCR,0);
 39c:	85 b7       	in	r24, 0x35	; 53
 39e:	81 60       	ori	r24, 0x01	; 1
 3a0:	85 bf       	out	0x35, r24	; 53
				Clear_Bit(MCUCR,1);
 3a2:	85 b7       	in	r24, 0x35	; 53
 3a4:	8d 7f       	andi	r24, 0xFD	; 253
 3a6:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
 3a8:	80 e0       	ldi	r24, 0x00	; 0
				Clear_Bit(MCUCR,1);
				break;
			case any_logical_change:
				Set_Bit(MCUCR,0);
				Clear_Bit(MCUCR,1);
				break;
 3aa:	11 c0       	rjmp	.+34     	; 0x3ce <ex_int_init+0x62>
			case falling_edge:
				Clear_Bit(MCUCR,0);
 3ac:	85 b7       	in	r24, 0x35	; 53
 3ae:	8e 7f       	andi	r24, 0xFE	; 254
 3b0:	85 bf       	out	0x35, r24	; 53
				Set_Bit(MCUCR,1);
 3b2:	85 b7       	in	r24, 0x35	; 53
 3b4:	82 60       	ori	r24, 0x02	; 2
 3b6:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
				Clear_Bit(MCUCR,1);
				break;
			case falling_edge:
				Clear_Bit(MCUCR,0);
				Set_Bit(MCUCR,1);
				break;
 3ba:	09 c0       	rjmp	.+18     	; 0x3ce <ex_int_init+0x62>
			case rising_edge:
				Set_Bit(MCUCR,0);
 3bc:	85 b7       	in	r24, 0x35	; 53
 3be:	81 60       	ori	r24, 0x01	; 1
 3c0:	85 bf       	out	0x35, r24	; 53
				Set_Bit(MCUCR,1);
 3c2:	85 b7       	in	r24, 0x35	; 53
 3c4:	82 60       	ori	r24, 0x02	; 2
 3c6:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
 3c8:	80 e0       	ldi	r24, 0x00	; 0
				Set_Bit(MCUCR,1);
				break;
			case rising_edge:
				Set_Bit(MCUCR,0);
				Set_Bit(MCUCR,1);
				break;
 3ca:	01 c0       	rjmp	.+2      	; 0x3ce <ex_int_init+0x62>
			default:
				error=1;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
		}
		Set_Bit(GICR,6);
 3ce:	9b b7       	in	r25, 0x3b	; 59
 3d0:	90 64       	ori	r25, 0x40	; 64
 3d2:	9b bf       	out	0x3b, r25	; 59
 3d4:	08 95       	ret
	}
	else if(ex_int_number == Interrupt_1)
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	81 f5       	brne	.+96     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	{
		switch(ex_int_mode)
 3da:	64 30       	cpi	r22, 0x04	; 4
 3dc:	89 f0       	breq	.+34     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3de:	18 f4       	brcc	.+6      	; 0x3e6 <ex_int_init+0x7a>
 3e0:	63 30       	cpi	r22, 0x03	; 3
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <ex_int_init+0x84>
 3e4:	25 c0       	rjmp	.+74     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 3e6:	65 30       	cpi	r22, 0x05	; 5
 3e8:	99 f0       	breq	.+38     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3ea:	66 30       	cpi	r22, 0x06	; 6
 3ec:	c9 f0       	breq	.+50     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3ee:	20 c0       	rjmp	.+64     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		{
			case low_level:
			Clear_Bit(MCUCR,2);
 3f0:	85 b7       	in	r24, 0x35	; 53
 3f2:	8b 7f       	andi	r24, 0xFB	; 251
 3f4:	85 bf       	out	0x35, r24	; 53
			Clear_Bit(MCUCR,3);
 3f6:	85 b7       	in	r24, 0x35	; 53
 3f8:	87 7f       	andi	r24, 0xF7	; 247
 3fa:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
 3fc:	80 e0       	ldi	r24, 0x00	; 0
		switch(ex_int_mode)
		{
			case low_level:
			Clear_Bit(MCUCR,2);
			Clear_Bit(MCUCR,3);
			break;
 3fe:	19 c0       	rjmp	.+50     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			case any_logical_change:
			Set_Bit(MCUCR,2);
 400:	85 b7       	in	r24, 0x35	; 53
 402:	84 60       	ori	r24, 0x04	; 4
 404:	85 bf       	out	0x35, r24	; 53
			Clear_Bit(MCUCR,3);
 406:	85 b7       	in	r24, 0x35	; 53
 408:	87 7f       	andi	r24, 0xF7	; 247
 40a:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
 40c:	80 e0       	ldi	r24, 0x00	; 0
			Clear_Bit(MCUCR,3);
			break;
			case any_logical_change:
			Set_Bit(MCUCR,2);
			Clear_Bit(MCUCR,3);
			break;
 40e:	11 c0       	rjmp	.+34     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			case falling_edge:
			Clear_Bit(MCUCR,2);
 410:	85 b7       	in	r24, 0x35	; 53
 412:	8b 7f       	andi	r24, 0xFB	; 251
 414:	85 bf       	out	0x35, r24	; 53
			Set_Bit(MCUCR,3);
 416:	85 b7       	in	r24, 0x35	; 53
 418:	88 60       	ori	r24, 0x08	; 8
 41a:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
 41c:	80 e0       	ldi	r24, 0x00	; 0
			Clear_Bit(MCUCR,3);
			break;
			case falling_edge:
			Clear_Bit(MCUCR,2);
			Set_Bit(MCUCR,3);
			break;
 41e:	09 c0       	rjmp	.+18     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			case rising_edge:
			Set_Bit(MCUCR,2);
 420:	85 b7       	in	r24, 0x35	; 53
 422:	84 60       	ori	r24, 0x04	; 4
 424:	85 bf       	out	0x35, r24	; 53
			Set_Bit(MCUCR,3);
 426:	85 b7       	in	r24, 0x35	; 53
 428:	88 60       	ori	r24, 0x08	; 8
 42a:	85 bf       	out	0x35, r24	; 53

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
 42c:	80 e0       	ldi	r24, 0x00	; 0
			Set_Bit(MCUCR,3);
			break;
			case rising_edge:
			Set_Bit(MCUCR,2);
			Set_Bit(MCUCR,3);
			break;
 42e:	01 c0       	rjmp	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			default:
			error=1;
 430:	81 e0       	ldi	r24, 0x01	; 1
		}
		Set_Bit(GICR,7);
 432:	9b b7       	in	r25, 0x3b	; 59
 434:	90 68       	ori	r25, 0x80	; 128
 436:	9b bf       	out	0x3b, r25	; 59
 438:	08 95       	ret
	}
	else if(ex_int_number == Interrupt_2)
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	a1 f4       	brne	.+40     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
	{
		switch(ex_int_mode)
 43e:	65 30       	cpi	r22, 0x05	; 5
 440:	19 f0       	breq	.+6      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 442:	66 30       	cpi	r22, 0x06	; 6
 444:	31 f0       	breq	.+12     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 446:	0a c0       	rjmp	.+20     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			case falling_edge:
				Clear_Bit(MCUCSR,6);
 448:	84 b7       	in	r24, 0x34	; 52
 44a:	8f 7b       	andi	r24, 0xBF	; 191
 44c:	84 bf       	out	0x34, r24	; 52

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
 44e:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(ex_int_mode)
		{
			case falling_edge:
				Clear_Bit(MCUCSR,6);
				break;
 450:	06 c0       	rjmp	.+12     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			case rising_edge:
				Set_Bit(MCUCSR,6);
 452:	84 b7       	in	r24, 0x34	; 52
 454:	80 64       	ori	r24, 0x40	; 64
 456:	84 bf       	out	0x34, r24	; 52

#include "Interrupt.h"

uint8_t ex_int_init(uint8_t ex_int_number, uint8_t ex_int_mode)
{
	uint8_t error=0;
 458:	80 e0       	ldi	r24, 0x00	; 0
			case falling_edge:
				Clear_Bit(MCUCSR,6);
				break;
			case rising_edge:
				Set_Bit(MCUCSR,6);
				break;
 45a:	01 c0       	rjmp	.+2      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			default:
				error=1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
		}
		Set_Bit(GICR,5);
 45e:	9b b7       	in	r25, 0x3b	; 59
 460:	90 62       	ori	r25, 0x20	; 32
 462:	9b bf       	out	0x3b, r25	; 59
 464:	08 95       	ret
	}
	else
	{
		error=1;
 466:	81 e0       	ldi	r24, 0x01	; 1
	}
	return error;
}
 468:	08 95       	ret

0000046a <__tablejump2__>:
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	05 90       	lpm	r0, Z+
 470:	f4 91       	lpm	r31, Z
 472:	e0 2d       	mov	r30, r0
 474:	09 94       	ijmp

00000476 <_exit>:
 476:	f8 94       	cli

00000478 <__stop_program>:
 478:	ff cf       	rjmp	.-2      	; 0x478 <__stop_program>
